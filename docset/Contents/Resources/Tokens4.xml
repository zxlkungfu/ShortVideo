<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AFHTTPResponseSerializer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AFHTTPResponseSerializer</TokenIdentifier>
			<Abstract type="html">AFHTTPResponseSerializer conforms to the AFURLRequestSerialization &amp;amp; AFURLResponseSerialization protocols, offering a concrete base implementation of query string / URL form-encoded parameter serialization and default request headers, as well as response status code and content type validation.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
            
			
			<NodeRef refid="4"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPResponseSerializer/setStringEncoding:</TokenIdentifier>
			<Abstract type="html">The string encoding used to serialize data received from the server, when no string encoding is specified by the response. NSUTF8StringEncoding by default.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSStringEncoding stringEncoding</Declaration>
			
			
			<Anchor>//api/name/stringEncoding</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPResponseSerializer/stringEncoding</TokenIdentifier>
			<Abstract type="html">The string encoding used to serialize data received from the server, when no string encoding is specified by the response. NSUTF8StringEncoding by default.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSStringEncoding stringEncoding</Declaration>
			
			
			<Anchor>//api/name/stringEncoding</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPResponseSerializer/stringEncoding</TokenIdentifier>
			<Abstract type="html">The string encoding used to serialize data received from the server, when no string encoding is specified by the response. NSUTF8StringEncoding by default.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) NSStringEncoding stringEncoding</Declaration>
			
			
			<Anchor>//api/name/stringEncoding</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AFHTTPResponseSerializer/serializer</TokenIdentifier>
			<Abstract type="html">Creates and returns a serializer with default configuration.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>+ (instancetype)serializer</Declaration>
			
			
			<Anchor>//api/name/serializer</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPResponseSerializer/setAcceptableStatusCodes:</TokenIdentifier>
			<Abstract type="html">The acceptable HTTP status codes for responses. When non-nil, responses with status codes not contained by the set will result in an error during validation.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) NSIndexSet *acceptableStatusCodes</Declaration>
			
			
			<Anchor>//api/name/acceptableStatusCodes</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPResponseSerializer/acceptableStatusCodes</TokenIdentifier>
			<Abstract type="html">The acceptable HTTP status codes for responses. When non-nil, responses with status codes not contained by the set will result in an error during validation.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) NSIndexSet *acceptableStatusCodes</Declaration>
			
			
			<Anchor>//api/name/acceptableStatusCodes</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPResponseSerializer/acceptableStatusCodes</TokenIdentifier>
			<Abstract type="html">The acceptable HTTP status codes for responses. When non-nil, responses with status codes not contained by the set will result in an error during validation.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) NSIndexSet *acceptableStatusCodes</Declaration>
			
			
			<Anchor>//api/name/acceptableStatusCodes</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPResponseSerializer/setAcceptableContentTypes:</TokenIdentifier>
			<Abstract type="html">The acceptable MIME types for responses. When non-nil, responses with a Content-Type with MIME types that do not intersect with the set will result in an error during validation.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) NSSet&lt;NSString*&gt; *acceptableContentTypes</Declaration>
			
			
			<Anchor>//api/name/acceptableContentTypes</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPResponseSerializer/acceptableContentTypes</TokenIdentifier>
			<Abstract type="html">The acceptable MIME types for responses. When non-nil, responses with a Content-Type with MIME types that do not intersect with the set will result in an error during validation.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) NSSet&lt;NSString*&gt; *acceptableContentTypes</Declaration>
			
			
			<Anchor>//api/name/acceptableContentTypes</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFHTTPResponseSerializer/acceptableContentTypes</TokenIdentifier>
			<Abstract type="html">The acceptable MIME types for responses. When non-nil, responses with a Content-Type with MIME types that do not intersect with the set will result in an error during validation.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, nullable) NSSet&lt;NSString*&gt; *acceptableContentTypes</Declaration>
			
			
			<Anchor>//api/name/acceptableContentTypes</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPResponseSerializer/validateResponse:data:error:</TokenIdentifier>
			<Abstract type="html">Validates the specified response and data.</Abstract>
			<DeclaredIn>AFURLResponseSerialization.h</DeclaredIn>
			
			<Declaration>- (BOOL)validateResponse:(nullable NSHTTPURLResponse *)response data:(nullable NSData *)data error:(NSError *_Nullable __autoreleasing *)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>response</Name>
					<Abstract type="html">The response to be validated.</Abstract>
				</Parameter><Parameter>
					<Name>data</Name>
					<Abstract type="html">The data associated with the response.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">The error that occurred while attempting to validate the response.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the response is valid, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/validateResponse:data:error:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFHTTPResponseSerializer/responseObjectForResponse:data:error:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AFURLResponseSerialization.m</DeclaredIn>
			
			<Declaration>- (id)responseObjectForResponse:(NSURLResponse *)response data:(NSData *)data error:(NSError *__autoreleasing *)error</Declaration>
			
			
			<Anchor>//api/name/responseObjectForResponse:data:error:</Anchor>
            <NodeRef refid="4"/>
		</Token>
		
        
        
	</File>
</Tokens>