<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AFURLSessionManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AFURLSessionManager</TokenIdentifier>
			<Abstract type="html">AFURLSessionManager creates and manages an NSURLSession object based on a specified NSURLSessionConfiguration object, which conforms to &lt;NSURLSessionTaskDelegate&gt;, &lt;NSURLSessionDataDelegate&gt;, &lt;NSURLSessionDownloadDelegate&gt;, and &lt;NSURLSessionDelegate&gt;.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
            
			
			<NodeRef refid="18"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setSession:</TokenIdentifier>
			<Abstract type="html">The managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSURLSession *session</Declaration>
			
			
			<Anchor>//api/name/session</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/session</TokenIdentifier>
			<Abstract type="html">The managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSURLSession *session</Declaration>
			
			
			<Anchor>//api/name/session</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/session</TokenIdentifier>
			<Abstract type="html">The managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSURLSession *session</Declaration>
			
			
			<Anchor>//api/name/session</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setOperationQueue:</TokenIdentifier>
			<Abstract type="html">The operation queue on which delegate callbacks are run.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/operationQueue</TokenIdentifier>
			<Abstract type="html">The operation queue on which delegate callbacks are run.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/operationQueue</TokenIdentifier>
			<Abstract type="html">The operation queue on which delegate callbacks are run.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSOperationQueue *operationQueue</Declaration>
			
			
			<Anchor>//api/name/operationQueue</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setResponseSerializer:</TokenIdentifier>
			<Abstract type="html">Responses sent from the server in data tasks created with dataTaskWithRequest:success:failure: and run using the GET / POST / et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to an instance of AFJSONResponseSerializer.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AFURLResponseSerialization&gt; responseSerializer</Declaration>
			
			
			<Anchor>//api/name/responseSerializer</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/responseSerializer</TokenIdentifier>
			<Abstract type="html">Responses sent from the server in data tasks created with dataTaskWithRequest:success:failure: and run using the GET / POST / et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to an instance of AFJSONResponseSerializer.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AFURLResponseSerialization&gt; responseSerializer</Declaration>
			
			
			<Anchor>//api/name/responseSerializer</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/responseSerializer</TokenIdentifier>
			<Abstract type="html">Responses sent from the server in data tasks created with dataTaskWithRequest:success:failure: and run using the GET / POST / et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to an instance of AFJSONResponseSerializer.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id&lt;AFURLResponseSerialization&gt; responseSerializer</Declaration>
			
			
			<Anchor>//api/name/responseSerializer</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setSecurityPolicy:</TokenIdentifier>
			<Abstract type="html">The security policy used by created session to evaluate server trust for secure connections. AFURLSessionManager uses the defaultPolicy unless otherwise specified.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFSecurityPolicy *securityPolicy</Declaration>
			
			
			<Anchor>//api/name/securityPolicy</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/securityPolicy</TokenIdentifier>
			<Abstract type="html">The security policy used by created session to evaluate server trust for secure connections. AFURLSessionManager uses the defaultPolicy unless otherwise specified.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFSecurityPolicy *securityPolicy</Declaration>
			
			
			<Anchor>//api/name/securityPolicy</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/securityPolicy</TokenIdentifier>
			<Abstract type="html">The security policy used by created session to evaluate server trust for secure connections. AFURLSessionManager uses the defaultPolicy unless otherwise specified.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFSecurityPolicy *securityPolicy</Declaration>
			
			
			<Anchor>//api/name/securityPolicy</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setReachabilityManager:</TokenIdentifier>
			<Abstract type="html">The network reachability manager. AFURLSessionManager uses the sharedManager by default.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic, strong) AFNetworkReachabilityManager *reachabilityManager</Declaration>
			
			
			<Anchor>//api/name/reachabilityManager</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/reachabilityManager</TokenIdentifier>
			<Abstract type="html">The network reachability manager. AFURLSessionManager uses the sharedManager by default.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic, strong) AFNetworkReachabilityManager *reachabilityManager</Declaration>
			
			
			<Anchor>//api/name/reachabilityManager</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/reachabilityManager</TokenIdentifier>
			<Abstract type="html">The network reachability manager. AFURLSessionManager uses the sharedManager by default.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readwrite, nonatomic, strong) AFNetworkReachabilityManager *reachabilityManager</Declaration>
			
			
			<Anchor>//api/name/reachabilityManager</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setTasks:</TokenIdentifier>
			<Abstract type="html">The data, upload, and download tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionTask*&gt; *tasks</Declaration>
			
			
			<Anchor>//api/name/tasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/tasks</TokenIdentifier>
			<Abstract type="html">The data, upload, and download tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionTask*&gt; *tasks</Declaration>
			
			
			<Anchor>//api/name/tasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/tasks</TokenIdentifier>
			<Abstract type="html">The data, upload, and download tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionTask*&gt; *tasks</Declaration>
			
			
			<Anchor>//api/name/tasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDataTasks:</TokenIdentifier>
			<Abstract type="html">The data tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionDataTask*&gt; *dataTasks</Declaration>
			
			
			<Anchor>//api/name/dataTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/dataTasks</TokenIdentifier>
			<Abstract type="html">The data tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionDataTask*&gt; *dataTasks</Declaration>
			
			
			<Anchor>//api/name/dataTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/dataTasks</TokenIdentifier>
			<Abstract type="html">The data tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionDataTask*&gt; *dataTasks</Declaration>
			
			
			<Anchor>//api/name/dataTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setUploadTasks:</TokenIdentifier>
			<Abstract type="html">The upload tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionUploadTask*&gt; *uploadTasks</Declaration>
			
			
			<Anchor>//api/name/uploadTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/uploadTasks</TokenIdentifier>
			<Abstract type="html">The upload tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionUploadTask*&gt; *uploadTasks</Declaration>
			
			
			<Anchor>//api/name/uploadTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/uploadTasks</TokenIdentifier>
			<Abstract type="html">The upload tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionUploadTask*&gt; *uploadTasks</Declaration>
			
			
			<Anchor>//api/name/uploadTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDownloadTasks:</TokenIdentifier>
			<Abstract type="html">The download tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionDownloadTask*&gt; *downloadTasks</Declaration>
			
			
			<Anchor>//api/name/downloadTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/downloadTasks</TokenIdentifier>
			<Abstract type="html">The download tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionDownloadTask*&gt; *downloadTasks</Declaration>
			
			
			<Anchor>//api/name/downloadTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/downloadTasks</TokenIdentifier>
			<Abstract type="html">The download tasks currently run by the managed session.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (readonly, nonatomic, strong) NSArray&lt;NSURLSessionDownloadTask*&gt; *downloadTasks</Declaration>
			
			
			<Anchor>//api/name/downloadTasks</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setCompletionQueue:</TokenIdentifier>
			<Abstract type="html">The dispatch queue for completionBlock. If NULL (default), the main queue is used.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) dispatch_queue_t completionQueue</Declaration>
			
			
			<Anchor>//api/name/completionQueue</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/completionQueue</TokenIdentifier>
			<Abstract type="html">The dispatch queue for completionBlock. If NULL (default), the main queue is used.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) dispatch_queue_t completionQueue</Declaration>
			
			
			<Anchor>//api/name/completionQueue</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/completionQueue</TokenIdentifier>
			<Abstract type="html">The dispatch queue for completionBlock. If NULL (default), the main queue is used.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) dispatch_queue_t completionQueue</Declaration>
			
			
			<Anchor>//api/name/completionQueue</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setCompletionGroup:</TokenIdentifier>
			<Abstract type="html">The dispatch group for completionBlock. If NULL (default), a private dispatch group is used.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) dispatch_group_t completionGroup</Declaration>
			
			
			<Anchor>//api/name/completionGroup</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/completionGroup</TokenIdentifier>
			<Abstract type="html">The dispatch group for completionBlock. If NULL (default), a private dispatch group is used.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) dispatch_group_t completionGroup</Declaration>
			
			
			<Anchor>//api/name/completionGroup</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/completionGroup</TokenIdentifier>
			<Abstract type="html">The dispatch group for completionBlock. If NULL (default), a private dispatch group is used.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, nullable) dispatch_group_t completionGroup</Declaration>
			
			
			<Anchor>//api/name/completionGroup</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setAttemptsToRecreateUploadTasksForBackgroundSessions:</TokenIdentifier>
			<Abstract type="html">Whether to attempt to retry creation of upload tasks for background sessions when initial call returns nil. NO by default.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL attemptsToRecreateUploadTasksForBackgroundSessions</Declaration>
			
			
			<Anchor>//api/name/attemptsToRecreateUploadTasksForBackgroundSessions</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/attemptsToRecreateUploadTasksForBackgroundSessions</TokenIdentifier>
			<Abstract type="html">Whether to attempt to retry creation of upload tasks for background sessions when initial call returns nil. NO by default.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL attemptsToRecreateUploadTasksForBackgroundSessions</Declaration>
			
			
			<Anchor>//api/name/attemptsToRecreateUploadTasksForBackgroundSessions</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFURLSessionManager/attemptsToRecreateUploadTasksForBackgroundSessions</TokenIdentifier>
			<Abstract type="html">Whether to attempt to retry creation of upload tasks for background sessions when initial call returns nil. NO by default.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL attemptsToRecreateUploadTasksForBackgroundSessions</Declaration>
			
			
			<Anchor>//api/name/attemptsToRecreateUploadTasksForBackgroundSessions</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/initWithSessionConfiguration:</TokenIdentifier>
			<Abstract type="html">Creates and returns a manager for a session created with the specified configuration. This is the designated initializer.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithSessionConfiguration:(nullable NSURLSessionConfiguration *)configuration</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">The configuration used to create the managed session.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A manager for a newly-created session.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithSessionConfiguration:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/invalidateSessionCancelingTasks:</TokenIdentifier>
			<Abstract type="html">Invalidates the managed session, optionally canceling pending tasks.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)invalidateSessionCancelingTasks:(BOOL)cancelPendingTasks</Declaration>
			<Parameters>
				<Parameter>
					<Name>cancelPendingTasks</Name>
					<Abstract type="html">Whether or not to cancel pending tasks.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/invalidateSessionCancelingTasks:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/dataTaskWithRequest:completionHandler:</TokenIdentifier>
			<Abstract type="html">Creates an NSURLSessionDataTask with the specified request.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request completionHandler:(nullable void ( ^ ) ( NSURLResponse *response , id _Nullable responseObject , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The HTTP request for the request.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/dataTaskWithRequest:completionHandler:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:</TokenIdentifier>
			<Abstract type="html">Creates an NSURLSessionDataTask with the specified request.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request uploadProgress:(nullable void ( ^ ) ( NSProgress *uploadProgress ))uploadProgressBlock downloadProgress:(nullable void ( ^ ) ( NSProgress *downloadProgress ))downloadProgressBlock completionHandler:(nullable void ( ^ ) ( NSURLResponse *response , id _Nullable responseObject , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The HTTP request for the request.</Abstract>
				</Parameter><Parameter>
					<Name>uploadProgressBlock</Name>
					<Abstract type="html">A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.</Abstract>
				</Parameter><Parameter>
					<Name>downloadProgressBlock</Name>
					<Abstract type="html">A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/dataTaskWithRequest:uploadProgress:downloadProgress:completionHandler:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/uploadTaskWithRequest:fromFile:progress:completionHandler:</TokenIdentifier>
			<Abstract type="html">Creates an NSURLSessionUploadTask with the specified request for a local file.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromFile:(NSURL *)fileURL progress:(nullable void ( ^ ) ( NSProgress *uploadProgress ))uploadProgressBlock completionHandler:(nullable void ( ^ ) ( NSURLResponse *response , id _Nullable responseObject , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The HTTP request for the request.</Abstract>
				</Parameter><Parameter>
					<Name>fileURL</Name>
					<Abstract type="html">A URL to the local file to be uploaded.</Abstract>
				</Parameter><Parameter>
					<Name>uploadProgressBlock</Name>
					<Abstract type="html">A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadTaskWithRequest:fromFile:progress:completionHandler:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/uploadTaskWithRequest:fromData:progress:completionHandler:</TokenIdentifier>
			<Abstract type="html">Creates an NSURLSessionUploadTask with the specified request for an HTTP body.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromData:(nullable NSData *)bodyData progress:(nullable void ( ^ ) ( NSProgress *uploadProgress ))uploadProgressBlock completionHandler:(nullable void ( ^ ) ( NSURLResponse *response , id _Nullable responseObject , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The HTTP request for the request.</Abstract>
				</Parameter><Parameter>
					<Name>bodyData</Name>
					<Abstract type="html">A data object containing the HTTP body to be uploaded.</Abstract>
				</Parameter><Parameter>
					<Name>uploadProgressBlock</Name>
					<Abstract type="html">A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadTaskWithRequest:fromData:progress:completionHandler:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/uploadTaskWithStreamedRequest:progress:completionHandler:</TokenIdentifier>
			<Abstract type="html">Creates an NSURLSessionUploadTask with the specified streaming request.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (NSURLSessionUploadTask *)uploadTaskWithStreamedRequest:(NSURLRequest *)request progress:(nullable void ( ^ ) ( NSProgress *uploadProgress ))uploadProgressBlock completionHandler:(nullable void ( ^ ) ( NSURLResponse *response , id _Nullable responseObject , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The HTTP request for the request.</Abstract>
				</Parameter><Parameter>
					<Name>uploadProgressBlock</Name>
					<Abstract type="html">A block object to be executed when the upload progress is updated. Note this block is called on the session queue, not the main queue.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadTaskWithStreamedRequest:progress:completionHandler:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/downloadTaskWithRequest:progress:destination:completionHandler:</TokenIdentifier>
			<Abstract type="html">Creates an NSURLSessionDownloadTask with the specified request.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (NSURLSessionDownloadTask *)downloadTaskWithRequest:(NSURLRequest *)request progress:(nullable void ( ^ ) ( NSProgress *downloadProgress ))downloadProgressBlock destination:(nullable NSURL *( ^ ) ( NSURL *targetPath , NSURLResponse *response ))destination completionHandler:(nullable void ( ^ ) ( NSURLResponse *response , NSURL *_Nullable filePath , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The HTTP request for the request.</Abstract>
				</Parameter><Parameter>
					<Name>downloadProgressBlock</Name>
					<Abstract type="html">A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.</Abstract>
				</Parameter><Parameter>
					<Name>destination</Name>
					<Abstract type="html">A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path &amp;amp; the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/downloadTaskWithRequest:progress:destination:completionHandler:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/downloadTaskWithResumeData:progress:destination:completionHandler:</TokenIdentifier>
			<Abstract type="html">Creates an NSURLSessionDownloadTask with the specified resume data.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (NSURLSessionDownloadTask *)downloadTaskWithResumeData:(NSData *)resumeData progress:(nullable void ( ^ ) ( NSProgress *downloadProgress ))downloadProgressBlock destination:(nullable NSURL *( ^ ) ( NSURL *targetPath , NSURLResponse *response ))destination completionHandler:(nullable void ( ^ ) ( NSURLResponse *response , NSURL *_Nullable filePath , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>resumeData</Name>
					<Abstract type="html">The data used to resume downloading.</Abstract>
				</Parameter><Parameter>
					<Name>downloadProgressBlock</Name>
					<Abstract type="html">A block object to be executed when the download progress is updated. Note this block is called on the session queue, not the main queue.</Abstract>
				</Parameter><Parameter>
					<Name>destination</Name>
					<Abstract type="html">A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path &amp;amp; the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/downloadTaskWithResumeData:progress:destination:completionHandler:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/uploadProgressForTask:</TokenIdentifier>
			<Abstract type="html">Returns the upload progress of the specified task.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSProgress *)uploadProgressForTask:(NSURLSessionTask *)task</Declaration>
			<Parameters>
				<Parameter>
					<Name>task</Name>
					<Abstract type="html">The session task. Must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSProgress object reporting the upload progress of a task, or nil if the progress is unavailable.</Abstract></ReturnValue>
			<Anchor>//api/name/uploadProgressForTask:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/downloadProgressForTask:</TokenIdentifier>
			<Abstract type="html">Returns the download progress of the specified task.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (nullable NSProgress *)downloadProgressForTask:(NSURLSessionTask *)task</Declaration>
			<Parameters>
				<Parameter>
					<Name>task</Name>
					<Abstract type="html">The session task. Must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSProgress object reporting the download progress of a task, or nil if the progress is unavailable.</Abstract></ReturnValue>
			<Anchor>//api/name/downloadProgressForTask:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setSessionDidBecomeInvalidBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when the managed session becomes invalid, as handled by the NSURLSessionDelegate method URLSession:didBecomeInvalidWithError:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setSessionDidBecomeInvalidBlock:(nullable void ( ^ ) ( NSURLSession *session , NSError *error ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when the managed session becomes invalid. The block has no return value, and takes two arguments: the session, and the error related to the cause of invalidation.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSessionDidBecomeInvalidBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setSessionDidReceiveAuthenticationChallengeBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when a connection level authentication challenge has occurred, as handled by the NSURLSessionDelegate method URLSession:didReceiveChallenge:completionHandler:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setSessionDidReceiveAuthenticationChallengeBlock:(nullable NSURLSessionAuthChallengeDisposition ( ^ ) ( NSURLSession *session , NSURLAuthenticationChallenge *challenge , NSURLCredential *_Nullable __autoreleasing *_Nullable credential ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when a connection level authentication challenge has occurred. The block returns the disposition of the authentication challenge, and takes three arguments: the session, the authentication challenge, and a pointer to the credential that should be used to resolve the challenge.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSessionDidReceiveAuthenticationChallengeBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setTaskNeedNewBodyStreamBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when a task requires a new request body stream to send to the remote server, as handled by the NSURLSessionTaskDelegate method URLSession:task:needNewBodyStream:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setTaskNeedNewBodyStreamBlock:(nullable NSInputStream *( ^ ) ( NSURLSession *session , NSURLSessionTask *task ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when a task requires a new request body stream.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setTaskNeedNewBodyStreamBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setTaskWillPerformHTTPRedirectionBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when an HTTP request is attempting to perform a redirection to a different URL, as handled by the NSURLSessionTaskDelegate method URLSession:willPerformHTTPRedirection:newRequest:completionHandler:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setTaskWillPerformHTTPRedirectionBlock:(nullable NSURLRequest *( ^ ) ( NSURLSession *session , NSURLSessionTask *task , NSURLResponse *response , NSURLRequest *request ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when an HTTP request is attempting to perform a redirection to a different URL. The block returns the request to be made for the redirection, and takes four arguments: the session, the task, the redirection response, and the request corresponding to the redirection response.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setTaskWillPerformHTTPRedirectionBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setTaskDidReceiveAuthenticationChallengeBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when a session task has received a request specific authentication challenge, as handled by the NSURLSessionTaskDelegate method URLSession:task:didReceiveChallenge:completionHandler:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setTaskDidReceiveAuthenticationChallengeBlock:(nullable NSURLSessionAuthChallengeDisposition ( ^ ) ( NSURLSession *session , NSURLSessionTask *task , NSURLAuthenticationChallenge *challenge , NSURLCredential *_Nullable __autoreleasing *_Nullable credential ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when a session task has received a request specific authentication challenge. The block returns the disposition of the authentication challenge, and takes four arguments: the session, the task, the authentication challenge, and a pointer to the credential that should be used to resolve the challenge.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setTaskDidReceiveAuthenticationChallengeBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setTaskDidSendBodyDataBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed periodically to track upload progress, as handled by the NSURLSessionTaskDelegate method URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setTaskDidSendBodyDataBlock:(nullable void ( ^ ) ( NSURLSession *session , NSURLSessionTask *task , int64_t bytesSent , int64_t totalBytesSent , int64_t totalBytesExpectedToSend ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be called when an undetermined number of bytes have been uploaded to the server. This block has no return value and takes five arguments: the session, the task, the number of bytes written since the last time the upload progress block was called, the total bytes written, and the total bytes expected to be written during the request, as initially determined by the length of the HTTP body. This block may be called multiple times, and will execute on the main thread.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setTaskDidSendBodyDataBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setTaskDidCompleteBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed as the last message related to a specific task, as handled by the NSURLSessionTaskDelegate method URLSession:task:didCompleteWithError:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setTaskDidCompleteBlock:(nullable void ( ^ ) ( NSURLSession *session , NSURLSessionTask *task , NSError *_Nullable error ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when a session task is completed. The block has no return value, and takes three arguments: the session, the task, and any error that occurred in the process of executing the task.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setTaskDidCompleteBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDataTaskDidReceiveResponseBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when a data task has received a response, as handled by the NSURLSessionDataDelegate method URLSession:dataTask:didReceiveResponse:completionHandler:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setDataTaskDidReceiveResponseBlock:(nullable NSURLSessionResponseDisposition ( ^ ) ( NSURLSession *session , NSURLSessionDataTask *dataTask , NSURLResponse *response ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when a data task has received a response. The block returns the disposition of the session response, and takes three arguments: the session, the data task, and the received response.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDataTaskDidReceiveResponseBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDataTaskDidBecomeDownloadTaskBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when a data task has become a download task, as handled by the NSURLSessionDataDelegate method URLSession:dataTask:didBecomeDownloadTask:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setDataTaskDidBecomeDownloadTaskBlock:(nullable void ( ^ ) ( NSURLSession *session , NSURLSessionDataTask *dataTask , NSURLSessionDownloadTask *downloadTask ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when a data task has become a download task. The block has no return value, and takes three arguments: the session, the data task, and the download task it has become.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDataTaskDidBecomeDownloadTaskBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDataTaskDidReceiveDataBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when a data task receives data, as handled by the NSURLSessionDataDelegate method URLSession:dataTask:didReceiveData:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setDataTaskDidReceiveDataBlock:(nullable void ( ^ ) ( NSURLSession *session , NSURLSessionDataTask *dataTask , NSData *data ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes three arguments: the session, the data task, and the data received. This block may be called multiple times, and will execute on the session manager operation queue.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDataTaskDidReceiveDataBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDataTaskWillCacheResponseBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed to determine the caching behavior of a data task, as handled by the NSURLSessionDataDelegate method URLSession:dataTask:willCacheResponse:completionHandler:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setDataTaskWillCacheResponseBlock:(nullable NSCachedURLResponse *( ^ ) ( NSURLSession *session , NSURLSessionDataTask *dataTask , NSCachedURLResponse *proposedResponse ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed to determine the caching behavior of a data task. The block returns the response to cache, and takes three arguments: the session, the data task, and the proposed cached URL response.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDataTaskWillCacheResponseBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDidFinishEventsForBackgroundURLSessionBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed once all messages enqueued for a session have been delivered, as handled by the NSURLSessionDataDelegate method URLSessionDidFinishEventsForBackgroundURLSession:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setDidFinishEventsForBackgroundURLSessionBlock:(nullable void ( ^ ) ( NSURLSession *session ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed once all messages enqueued for a session have been delivered. The block has no return value and takes a single argument: the session.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDidFinishEventsForBackgroundURLSessionBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDownloadTaskDidFinishDownloadingBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when a download task has completed a download, as handled by the NSURLSessionDownloadDelegate method URLSession:downloadTask:didFinishDownloadingToURL:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setDownloadTaskDidFinishDownloadingBlock:(nullable NSURL *_Nullable ( ^ ) ( NSURLSession *session , NSURLSessionDownloadTask *downloadTask , NSURL *location ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when a download task has completed. The block returns the URL the download should be moved to, and takes three arguments: the session, the download task, and the temporary location of the downloaded file. If the file manager encounters an error while attempting to move the temporary file to the destination, an AFURLSessionDownloadTaskDidFailToMoveFileNotification will be posted, with the download task as its object, and the user info of the error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDownloadTaskDidFinishDownloadingBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDownloadTaskDidWriteDataBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed periodically to track download progress, as handled by the NSURLSessionDownloadDelegate method URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setDownloadTaskDidWriteDataBlock:(nullable void ( ^ ) ( NSURLSession *session , NSURLSessionDownloadTask *downloadTask , int64_t bytesWritten , int64_t totalBytesWritten , int64_t totalBytesExpectedToWrite ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes five arguments: the session, the download task, the number of bytes read since the last time the download progress block was called, the total bytes read, and the total bytes expected to be read during the request, as initially determined by the expected content size of the NSHTTPURLResponse object. This block may be called multiple times, and will execute on the session manager operation queue.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDownloadTaskDidWriteDataBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFURLSessionManager/setDownloadTaskDidResumeBlock:</TokenIdentifier>
			<Abstract type="html">Sets a block to be executed when a download task has been resumed, as handled by the NSURLSessionDownloadDelegate method URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:.</Abstract>
			<DeclaredIn>AFURLSessionManager.h</DeclaredIn>
			
			<Declaration>- (void)setDownloadTaskDidResumeBlock:(nullable void ( ^ ) ( NSURLSession *session , NSURLSessionDownloadTask *downloadTask , int64_t fileOffset , int64_t expectedTotalBytes ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block object to be executed when a download task has been resumed. The block has no return value and takes four arguments: the session, the download task, the file offset of the resumed download, and the total number of bytes expected to be downloaded.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setDownloadTaskDidResumeBlock:</Anchor>
            <NodeRef refid="18"/>
		</Token>
		
        
        
	</File>
</Tokens>