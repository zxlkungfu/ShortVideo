<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/UIWebView+AFNetworking.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/UIWebView(AFNetworking)</TokenIdentifier>
			<Abstract type="html">This category adds methods to the UIKit framework&apos;s UIWebView class. The methods in this category provide increased control over the request cycle, including progress monitoring and success / failure handling.</Abstract>
			<DeclaredIn>UIWebView+AFNetworking.h</DeclaredIn>
            
			
			<NodeRef refid="56"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIWebView/setSessionManager:</TokenIdentifier>
			<Abstract type="html">The session manager used to download all requests.</Abstract>
			<DeclaredIn>UIWebView+AFNetworking.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFHTTPSessionManager *sessionManager</Declaration>
			
			
			<Anchor>//api/name/sessionManager</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIWebView/sessionManager</TokenIdentifier>
			<Abstract type="html">The session manager used to download all requests.</Abstract>
			<DeclaredIn>UIWebView+AFNetworking.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFHTTPSessionManager *sessionManager</Declaration>
			
			
			<Anchor>//api/name/sessionManager</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UIWebView/sessionManager</TokenIdentifier>
			<Abstract type="html">The session manager used to download all requests.</Abstract>
			<DeclaredIn>UIWebView+AFNetworking.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFHTTPSessionManager *sessionManager</Declaration>
			
			
			<Anchor>//api/name/sessionManager</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIWebView/loadRequest:progress:success:failure:</TokenIdentifier>
			<Abstract type="html">Asynchronously loads the specified request.</Abstract>
			<DeclaredIn>UIWebView+AFNetworking.h</DeclaredIn>
			
			<Declaration>- (void)loadRequest:(NSURLRequest *)request progress:(NSProgress *_Nullable __autoreleasing *_Nullable)progress success:(nullable NSString *( ^ ) ( NSHTTPURLResponse *response , NSString *HTML ))success failure:(nullable void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A URL request identifying the location of the content to load. This must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>progress</Name>
					<Abstract type="html">A progress object monitoring the current download progress.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the request finishes loading successfully. This block returns the HTML string to be loaded by the web view, and takes two arguments: the response, and the response string.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the data task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a single argument: the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadRequest:progress:success:failure:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIWebView/loadRequest:MIMEType:textEncodingName:progress:success:failure:</TokenIdentifier>
			<Abstract type="html">Asynchronously loads the data associated with a particular request with a specified MIME type and text encoding.</Abstract>
			<DeclaredIn>UIWebView+AFNetworking.h</DeclaredIn>
			
			<Declaration>- (void)loadRequest:(NSURLRequest *)request MIMEType:(nullable NSString *)MIMEType textEncodingName:(nullable NSString *)textEncodingName progress:(NSProgress *_Nullable __autoreleasing *_Nullable)progress success:(nullable NSData *( ^ ) ( NSHTTPURLResponse *response , NSData *data ))success failure:(nullable void ( ^ ) ( NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A URL request identifying the location of the content to load. This must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>MIMEType</Name>
					<Abstract type="html">The MIME type of the content. Defaults to the content type of the response if not specified.</Abstract>
				</Parameter><Parameter>
					<Name>textEncodingName</Name>
					<Abstract type="html">The IANA encoding name, as in utf-8 or utf-16. Defaults to the response text encoding if not specified.</Abstract>
				</Parameter><Parameter>
					<Name>progress</Name>
					<Abstract type="html">A progress object monitoring the current download progress.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block object to be executed when the request finishes loading successfully. This block returns the data to be loaded by the web view and takes two arguments: the response, and the downloaded data.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the data task finishes unsuccessfully, or that finishes successfully, but encountered an error while parsing the response data. This block has no return value and takes a single argument: the error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadRequest:MIMEType:textEncodingName:progress:success:failure:</Anchor>
            <NodeRef refid="56"/>
		</Token>
		
        
        
	</File>
</Tokens>